# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/rank.ipynb (unless otherwise specified).

__all__ = ['trace', 'val1', 'all_click_df', 'item_feat', 'phase', 'match_num', 'load_match_items',
           'load_match_items789', 'data_preporcess', 'fe', 'load_co_occurance_matrix', 'get_model_input', 'get_model',
           'r', 'rp']

# Cell
import os
import sys
sys.path.append('../mylib/')
from .eda import *
from .config import args
import pandas as pd
import numpy as np
from tqdm import tqdm
from loguru import logger
from utils.pickle import PickleWrapper
import scipy.sparse as sp

# Cell
trace = logger.add(os.path.join(args.DATA_DIR, 'data_gen/runtime.log'))

# Cell
def val1(df, topk, click_val):
    """
    """
    sr = df.groupby('user_id')['item_id_pred'].agg(list)
    r_list = []
    pred_num = click_val.shape[0]
    for line in click_val.itertuples():
        try:
            df.loc[df.user_id==line.user_id, 'item_id_true'] = line.item_id
            t = sr[line.user_id]
            i = t.index(line.item_id)
        except:
            i = 99999

        r_list.append(i)
    r_series = pd.Series(r_list)
    for i in range(25, topk+1, 25):
        logger.info(f'recall{i}:{r_series[r_series<i].shape[0]/pred_num}')

#     r_series[r_series<9999].plot(kind='box', title='pp', rot=45)
    return df

# Cell
all_click_df = load_click_data_per_phase(args.now_phase, args.DATA_DIR)

# Cell
item_feat = get_item_data()

# Cell
item_feat['text_vec'] = item_feat.iloc[:, 1:129].values.tolist()
item_feat['img_vec'] = item_feat.iloc[:, 129:257].values.tolist()

item_feat['text_vec'] = item_feat['text_vec'].map(np.array)

item_feat['img_vec'] = item_feat['img_vec'].map(np.array)

item_feat.set_index('item_id', inplace=True)

# Cell
phase = [0, 1, 2, 3, 5, 6, 4]

# phase = [4]
# match_num = 200
match_num = 500

# Cell
def load_match_items():
    r_itemcf = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_itemcf_0527.pkl'))

    r_binn = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_binn_0527.pkl'))

    r_itemcf_phase4 = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_itemcf_0527_phase4.pkl'))

    r_binn_phase4 = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_binn_0527_phase4.pkl'))


    r_itemcf_yl = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_itemcf_yulao_0527.pkl'))
    r_list_w2v = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_w2v_0602_all.pkl'))
    r_itemcf = r_itemcf + r_itemcf_phase4
    r_binn = r_binn + r_binn_phase4
    r_itemcf_yl = [r_itemcf_yl[0], r_itemcf_yl[1],r_itemcf_yl[2],r_itemcf_yl[3],r_itemcf_yl[5],r_itemcf_yl[6],r_itemcf_yl[4]]

    r_list_w2v = [r_list_w2v[0], r_list_w2v[1],r_list_w2v[2],r_list_w2v[3],r_list_w2v[5],r_list_w2v[6],r_list_w2v[4]]
    return r_itemcf, r_binn, r_itemcf_yl, r_list_w2v


def load_match_items789():
    r_itemcf = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_itemcf_0605_789.pkl'))

    r_binn = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_binn_0605_789.pkl'))

    r_itemcf_yl = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_itemcf_yulao_0606_789.pkl'))
    r_list_w2v = PickleWrapper.loadFromFile(os.path.join(args.DATA_DIR, 'data_gen/r_list_w2v_0605_789.pkl'))

    return r_itemcf, r_binn, r_itemcf_yl, r_list_w2v


# Cell

def data_preporcess(recall_list, match_num, phase, mode='train'):

    itemcf, r_binn, r_itemcf_yl, r_list_w2v = recall_list
    df1 = pd.DataFrame()
    df2 = pd.DataFrame()
    df3 = pd.DataFrame()
    df4 = pd.DataFrame()
    for i in range(len(phase)):
        r_itemcf[i]['phase'] = phase[i]
        r_binn[i]['phase'] = phase[i]
        r_itemcf_yl[i]['phase'] = phase[i]
        r_list_w2v[i]['phase'] = phase[i]
        df1 = df1.append(r_itemcf[i])
        df2 = df2.append(r_binn[i])
        df3 = df3.append(r_itemcf_yl[i])
        df4 = df4.append(r_list_w2v[i])

    df1_ = df1[df1['rank']<(match_num+1)]
    df2_ = df2[df2['rank']<(match_num+1)]
    df3_ = df3[df3['rank']<(match_num+1)]
    df4_ = df4[df4['rank']<(match_num+1)]

    print('merge Multi-channel recall...')
    cols = 'user_id item_id_pred phase'.split()

    if mode == 'train':
        cols = 'user_id item_id_pred item_id_true phase'.split()
    df = pd.merge(pd.merge(pd.merge(df1_,
                                    df2_, on=cols, how='outer'),
                                      df3_, on=cols, how='outer'),
                                      df4_, on=cols, how='outer')

    df = df.fillna(0)
    if mode == 'train':
        df['label'] = (df['item_id_pred'] == df['item_id_true']).map(int)


    dft = pd.DataFrame()
    for p in tqdm(phase):
        # 获取test用户的近n次点击
        temp_ = all_click_df[p][0][all_click_df[p][0].user_id.isin(all_click_df[p][1].user_id)].groupby('user_id')['item_id'].agg(list)
        temp_ = pd.DataFrame(temp_)
        for i in range(0, 3):
            temp_[f'last_{i+1}'] = temp_.item_id.str.get(-(i+1))
        dft = dft.append(temp_.reset_index())
        # 计算每个phase的item_id cnt
        t_ = all_click_df[p][0].groupby('item_id')['user_id'].count()
        df.loc[df.phase==p, 'item_cnt'] = df.item_id_pred.map(lambda x: t_[x] if x in t_ else 0)

    df = pd.merge(df, dft.drop(columns='item_id'))



    # 太大了，不建议存储
    # df.to_pickle(os.path.join(args.DATA_DIR, f'data_gen/dft{match_num}.pkl'))

    # df = pd.read_pickle(os.path.join(args.DATA_DIR, f'data_gen/dft{match_num}.pkl'))
    return df

# Cell
def fe(df):
    for i in tqdm('rank score'.split()):
        df[f'{i}1_sub_{i}2'] = df[f'{i}_1']-df[f'{i}_2']
        df[f'{i}1_add_{i}2'] = df[f'{i}_1']+df[f'{i}_2']
        df[f'{i}1_mul_{i}2'] = df[f'{i}_1']*df[f'{i}_2']

        df[f'{i}1_sub_{i}3'] = df[f'{i}_1']-df[f'{i}_3']
        df[f'{i}1_add_{i}3'] = df[f'{i}_1']+df[f'{i}_3']
        df[f'{i}1_mul_{i}3'] = df[f'{i}_1']*df[f'{i}_3']

        df[f'{i}1_sub_{i}4'] = df[f'{i}_1']-df[f'{i}_4']
        df[f'{i}1_add_{i}4'] = df[f'{i}_1']+df[f'{i}_4']
        df[f'{i}1_mul_{i}4'] = df[f'{i}_1']*df[f'{i}_4']

        df[f'{i}2_sub_{i}3'] = df[f'{i}_2']-df[f'{i}_3']
        df[f'{i}2_add_{i}3'] = df[f'{i}_2']+df[f'{i}_3']
        df[f'{i}2_mul_{i}3'] = df[f'{i}_2']*df[f'{i}_3']

        df[f'{i}2_sub_{i}4'] = df[f'{i}_2']-df[f'{i}_4']
        df[f'{i}2_add_{i}4'] = df[f'{i}_2']+df[f'{i}_4']
        df[f'{i}2_mul_{i}4'] = df[f'{i}_2']*df[f'{i}_4']

        df[f'{i}3_sub_{i}4'] = df[f'{i}_3']-df[f'{i}_4']
        df[f'{i}3_add_{i}4'] = df[f'{i}_3']+df[f'{i}_4']
        df[f'{i}3_mul_{i}4'] = df[f'{i}_3']*df[f'{i}_4']

        df[f'{i}1_add_{i}2_add_{i}3'] = df[f'{i}_1']+df[f'{i}_2']+df[f'{i}_3']
        df[f'{i}1_mul_{i}2_mul_{i}3'] = df[f'{i}_1']*df[f'{i}_2']*df[f'{i}_3']

        df[f'{i}1_add_{i}2_add_{i}4'] = df[f'{i}_1']+df[f'{i}_2']+df[f'{i}_4']
        df[f'{i}1_mul_{i}2_mul_{i}4'] = df[f'{i}_1']*df[f'{i}_2']*df[f'{i}_4']

        df[f'{i}4_add_{i}2_add_{i}3'] = df[f'{i}_4']+df[f'{i}_2']+df[f'{i}_3']
        df[f'{i}4_mul_{i}2_mul_{i}3'] = df[f'{i}_4']*df[f'{i}_2']*df[f'{i}_3']

        df[f'{i}1_add_{i}2_add_{i}3_add_{i}4'] = df[f'{i}_1']+df[f'{i}_2']+df[f'{i}_3']+df[f'{i}_4']
        df[f'{i}1_mul_{i}2_mul_{i}3_mul_{i}4'] = df[f'{i}_1']*df[f'{i}_2']*df[f'{i}_3']*df[f'{i}_4']

#     df['sim1_text'] = (df['item_id_pred_text_vec'] * df['last_1_text_vec']).map(sum)

#     df['sim1_img'] = (df['item_id_pred_img_vec'] * df['last_1_img_vec']).map(sum)

#     df['sim2_text'] = (df['item_id_pred_text_vec'] * df['last_2_text_vec']).map(sum)
#     df['sim2_img'] = (df['item_id_pred_img_vec'] * df['last_2_img_vec']).map(sum)

#     df['sim3_text'] = (df['item_id_pred_text_vec'] * df['last_3_text_vec']).map(sum)
#     df['sim3_img'] = (df['item_id_pred_img_vec'] * df['last_3_img_vec']).map(sum)

#     df['sim4_text'] = (df['item_id_pred_text_vec'] * df['last_4_text_vec']).map(sum)
#     df['sim4_img'] = (df['item_id_pred_img_vec'] * df['last_4_img_vec']).map(sum)

#     df['sim5_text'] = (df['item_id_pred_text_vec'] * df['last_5_text_vec']).map(sum)
#     df['sim5_img'] = (df['item_id_pred_img_vec'] * df['last_5_img_vec']).map(sum)



    df['sim1_text_img'] = df['sim1_text'] *  df['sim1_img']
    df['sim2_text_img'] = df['sim2_text'] *  df['sim2_img']
    df['sim3_text_img'] = df['sim3_text'] *  df['sim3_img']
#     df['sim4_text_img'] = df['sim4_text'] *  df['sim4_img']
#     df['sim5_text_img'] = df['sim5_text'] *  df['sim5_img']

    df['sim12_text'] = df['sim1_text'] + df['sim2_text']
    df['sim123_text'] = df['sim1_text'] + df['sim2_text'] + df['sim3_text']
#     df['sim1234_text'] = df['sim1_text'] + df['sim2_text'] + df['sim3_text'] + df['sim4_text']
#     df['sim12345_text'] = df['sim1_text'] + df['sim2_text'] + df['sim3_text'] + df['sim4_text'] + df['sim5_text']

    df['sim12_img'] = df['sim1_img'] + df['sim2_img']
    df['sim123_img'] = df['sim1_img'] + df['sim2_img'] + df['sim3_img']
#     df['sim1234_img'] = df['sim1_img'] + df['sim2_img'] + df['sim3_img'] + df['sim4_img']
#     df['sim12345_img'] = df['sim1_img'] + df['sim2_img'] + df['sim3_img'] + df['sim4_img'] + df['sim5_img']

    df['sim12_text_img'] = df['sim1_text_img'] + df['sim2_text_img']
    df['sim123_text_img'] = df['sim1_text_img'] + df['sim2_text_img'] + df['sim3_text_img']
#     df['sim1234_text_img'] = df['sim1_text_img'] + df['sim2_text_img'] + df['sim3_text_img'] + df['sim4_text_img']
#     df['sim12345_text_img'] = df['sim1_text_img'] + df['sim2_text_img'] + df['sim3_text_img'] + df['sim4_text_img'] + df['sim5_text_img']


    return df

# Cell
#export
def load_co_occurance_matrix(save_dir,penalty1,penalty2,penalty3):
    id2item = pd.read_pickle(os.path.join(save_dir, f'id2item_series_{penalty1}_{penalty2}_{penalty3}.pkl'))
    item2id = pd.read_pickle(os.path.join(save_dir, f'item2id_series_{penalty1}_{penalty2}_{penalty3}.pkl'))
    co_occurance_matrix = sp.load_npz(os.path.join(save_dir, f'item_item_matrix_{penalty1}_{penalty2}_{penalty3}.npz'))
    return co_occurance_matrix, id2item, item2id

# Cell
def get_model_input(df, mode='train'):
    from catboost import Pool, CatBoostClassifier

    cols = ['score_1', 'rank_1',
       'score_2', 'rank_2', 'score_3', 'rank_3', 'score_4', 'rank_4',
       'item_cnt', 'last_1', 'last_2', 'last_3', 'sim1_text', 'sim1_img',
       'sim2_text', 'sim2_img', 'sim3_text', 'sim3_img', 'rank1_sub_rank2',
       'rank1_add_rank2', 'rank1_mul_rank2', 'rank1_sub_rank3',
       'rank1_add_rank3', 'rank1_mul_rank3', 'rank1_sub_rank4',
       'rank1_add_rank4', 'rank1_mul_rank4', 'rank2_sub_rank3',
       'rank2_add_rank3', 'rank2_mul_rank3', 'rank2_sub_rank4',
       'rank2_add_rank4', 'rank2_mul_rank4', 'rank3_sub_rank4',
       'rank3_add_rank4', 'rank3_mul_rank4', 'score1_sub_score2',
       'score1_add_score2', 'score1_mul_score2', 'score1_sub_score3',
       'score1_add_score3', 'score1_mul_score3', 'score1_sub_score4',
       'score1_add_score4', 'score1_mul_score4', 'score2_sub_score3',
       'score2_add_score3', 'score2_mul_score3', 'score2_sub_score4',
       'score2_add_score4', 'score2_mul_score4', 'score3_sub_score4',
       'score3_add_score4', 'score3_mul_score4', 'sim1_text_img',
       'sim2_text_img', 'sim3_text_img', 'sim12_text', 'sim123_text',
       'sim12_img', 'sim123_img', 'sim12_text_img', 'sim123_text_img',
       'rank1_add_rank2_add_rank3', 'rank1_mul_rank2_mul_rank3',
       'rank1_add_rank2_add_rank4', 'rank1_mul_rank2_mul_rank4',
       'rank4_add_rank2_add_rank3', 'rank4_mul_rank2_mul_rank3',
       'rank1_add_rank2_add_rank3_add_rank4',
       'rank1_mul_rank2_mul_rank3_mul_rank4', 'score1_add_score2_add_score3',
       'score1_mul_score2_mul_score3', 'score1_add_score2_add_score4',
       'score1_mul_score2_mul_score4', 'score4_add_score2_add_score3',
       'score4_mul_score2_mul_score3',
       'score1_add_score2_add_score3_add_score4',
       'score1_mul_score2_mul_score3_mul_score4']
    df['fscore'] = 0
    df['frank'] = 999
    cat_cols = []
    if mode=='train':
        X_train, X_test, y_train, y_test = df.loc[df['phase']<7, cols], df.loc[df['phase']>6, cols], df.loc[df['phase']<7, 'label'],\
                                               df.loc[df['phase']>6, 'label']


        train_data = Pool(data=X_train,
                           label=y_train,
                           cat_features=cat_cols)
        val_data = Pool(data=X_test, label=y_test, cat_features=cat_cols)
        return train_data, val_data, cat_cols
#     cols.remove('label')
    X_test = df[cols]
    test_data = Pool(data=X_test, cat_features=cat_cols)
    return test_data, cat_cols

# Cell
def get_model():
    from catboost import Pool, CatBoostClassifier
    params = {
        'iterations': 20,
        'learning_rate': 0.1,
        'random_seed': 144,
        'custom_metric': 'F1',
        'loss_function': 'Logloss',
        'class_weights': [1, 20],
    #     'use_best_model': False
        }
    print(params)
    model = CatBoostClassifier(**params)
    return model

# Cell
# r_itemcf, r_binn, r_itemcf_yl = load_match_items()
# dfa = data_preporcess([r_itemcf, r_binn, r_itemcf_yl], match_num, phase)
# dfa = fe(dfa)
# train_data, val_data, cat_cols = get_model_input(dfa)

r = model.fit(train_data,
#               eval_set=val_data,
              verbose=False,plot=False)

rp = model.predict_proba(val_data)[:, 1]