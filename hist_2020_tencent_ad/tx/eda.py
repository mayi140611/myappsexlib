# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/0EDA.ipynb (unless otherwise specified).

__all__ = ['test_dir', 'train_dir', 'get_trainset_raw', 'get_ad_feat', 'get_valset_raw', 'get_testset_raw', 'val']

# Cell
import os
from .config import *
from loguru import logger
import numpy as np
import pandas as pd
pd.set_option('display.max_rows', 200)
pd.set_option('display.max_columns', 100)  # 设置显示数据的最大列数，防止出现省略号…，导致数据显示不全
pd.set_option('expand_frame_repr', False)  # 当列太多时不自动换行
from multiprocessing.dummy import Pool
import seaborn as sns
sns.set(font='Arial Unicode MS')  # 解决Seaborn中文显示问题
# import sys
# sys.path.append('/Users/luoyonggui/PycharmProjects/mayiutils_n1/mayiutils/data_prepare')
# from data_explore import DataExplore as de

# Cell
test_dir = 'data_origin/test'
train_dir = 'data_origin/train_preliminary/'

# Cell
def get_trainset_raw():
    click_log_train = pd.read_pickle(os.path.join(args.DATA_DIR, 'data_gen/click_log_train.pkl'))
    user_train = pd.read_pickle(os.path.join(args.DATA_DIR, 'data_gen/user_train.pkl'))
    return user_train.set_index('user_id'), click_log_train
def get_ad_feat():
    str_cols = 'creative_id ad_id product_id product_category advertiser_id industry'.split()
    ad_feat = pd.read_csv(os.path.join(args.DATA_DIR, train_dir, 'ad.csv'), converters={c: str for c in str_cols})
    ad_feat = ad_feat.set_index('creative_id')
    return  ad_feat
def get_valset_raw():
    click_log_val = pd.read_pickle(os.path.join(args.DATA_DIR, 'data_gen/click_log_val.pkl'))
    user_val = pd.read_pickle(os.path.join(args.DATA_DIR, 'data_gen/user_val.pkl'))
    return user_val.set_index('user_id'), click_log_val

def get_testset_raw():
    str_cols = 'user_id creative_id'.split()
    click_log_test = pd.read_csv(os.path.join(args.DATA_DIR, test_dir, 'click_log.csv'), converters={c: str for c in str_cols})

    user_test = pd.DataFrame(click_log_test.user_id.unique().tolist(), columns=['user_id'])
    return user_test.set_index('user_id'), click_log_test

# Cell
def val(model, df_val, y_val, cat_cols):
    test_data = Pool(data=df_val,
                  cat_features=cat_cols)
    print(pd.Series(model.predict(test_data)).value_counts())
    print(classification_report(y_val, model.predict(test_data)))
    dfr = pd.DataFrame(y_val)
    dfr.columns = ['true_label']
#     dfr['CHANGE_ID'] = df_val['CHANGE_ID']
    y_test_hat = model.predict_proba(test_data)[:, 1]
    dfr['score'] = y_test_hat
    dfr['predict_label'] = model.predict(test_data)
    dfr = dfr.sort_values('score', ascending=False)
    dfr['order'] = range(1, dfr.shape[0] + 1)
    print(dfr[dfr.true_label == 1])
    return dfr