# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/0EDA.ipynb (unless otherwise specified).

__all__ = ['load_whole_click_data']

# Cell

import pandas as pd
from loguru import logger

# Cell

def load_whole_click_data(now_phase):
    """
    gen_val_set = 是否产生线性验证集
    """
#     now_phase = 2
    train_path = './data_origin/underexpose_train'
    test_path = './data_origin/underexpose_test'
    recom_item = []

    whole_click = pd.DataFrame()
    click_train = pd.DataFrame()
    click_test = pd.DataFrame()
    test_qtime = pd.DataFrame()
    click_test_val = pd.DataFrame()
    all_click_df = []
    for c in range(now_phase + 1):
        logger.info(f'phase: {c}')
        click_train1 = pd.read_csv(train_path + '/underexpose_train_click-{}.csv'.format(c), header=None,  names=['user_id', 'item_id', 'time'])
        click_test1 = pd.read_csv(test_path + '/underexpose_test_click-{}/underexpose_test_click-{}.csv'.format(c, c), header=None,  names=['user_id', 'item_id', 'time'])
        test_qtime1 = pd.read_csv(test_path + '/underexpose_test_click-{}/underexpose_test_qtime-{}.csv'.format(c, c), header=None,  names=['user_id','query_time'])

        click_test1_val = click_test1.sort_values(['user_id', 'time']).drop_duplicates(subset=['user_id'],keep='last')

        click_test1 = click_test1[~click_test1.index.isin(click_test1_val.index)]

        whole_click = whole_click.append(click_train1).append(click_test1)
        test_qtime = test_qtime.append(test_qtime1)
        click_test_val = click_test_val.append(click_test1_val, ignore_index=True)

    whole_click = whole_click.sort_values(['user_id', 'time']).drop_duplicates(keep='last')
    logger.info(f'去重前whole_click 共{whole_click.shape[0]}条')
    whole_click = pd.merge(whole_click, test_qtime, how='left').fillna(100)
    whole_filter = whole_click[whole_click.time > whole_click.query_time]

    logger.info(f'filter click data that time > query_time 共{whole_filter.shape[0]}条')
    whole_click = whole_click[whole_click.time <= whole_click.query_time]
    del whole_click['query_time']
    # 只保留一个user_id购买最后一次的item_id
    whole_click_train = whole_click.sort_values(['user_id', 'time']).drop_duplicates(subset=['user_id','item_id'],keep='last').reset_index(drop=True)

    return whole_click_train, test_qtime, click_test_val