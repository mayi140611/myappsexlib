# AUTOGENERATED! DO NOT EDIT! File to edit: db-sql-mysql.ipynb (unless otherwise specified).

__all__ = ['PyMysqlWrapper']

# Cell
import pymysql


class PyMysqlWrapper:
    """
    常用是sql场景：
    查询不重复的记录：
        select distinct name from user;
        select id,name from user group by name;
    """
    def __init__(self, user='root', passwd='123456', db='test', host='127.0.0.1', use_unicode=True, charset='utf8'):
        """
        创建连接、创建游标
        :param user:
        :param passwd:
        :param db:
        :param host:
        :param use_unicode:
        :param charset:
        :return:
        """
        self._conn = pymysql.connect(user=user, passwd=passwd, db=db, host=host, use_unicode=use_unicode, charset=charset)
        self._cursor = self._conn.cursor()

    def getCursor(self):
        return self._cursor

    def execute(self, sql, args=None):
        """
        Execute a query 并且提交,返回查询结果条数
        :return:
        """
        n = self._cursor.execute(sql, args)
        return n

    def excuteMany(self, sql, args):
        """

        """
        n = self._cursor.executemany(sql, args)
        return n

    def commit(self):
        """
        """
        self._conn.commit()

    def queryAndFetchAll(self, sql, return_df=True, cols=None):
        """
        针对查询的便利方法
        :param sql:
        :param return_df:  是否返回df格式
        :param cols:  如果以df格式返回时的col_name
        :return: 查询结果
            (('code1', 'name1'),
            ('code2', 'name2'),
            ……)
        """
        self._cursor.execute(sql)
        r = self._cursor.fetchall()
        if return_df:
            import pandas as pd
            return pd.DataFrame(list(r), columns=cols)
        return r

    def close(self):
        self._cursor.close()
        self._conn.close()