# AUTOGENERATED! DO NOT EDIT! File to edit: algo_ml_shallow_tree_catboost.ipynb (unless otherwise specified).

__all__ = ['val', 'predict', 'explain']

# Cell
from sklearn.metrics import classification_report

from catboost import Pool

# Cell
def val(model, df_val, y_val, cat_cols):
    test_data = Pool(data=df_val,
                  cat_features=cat_cols)
    print(pd.Series(model.predict(test_data)).value_counts())
    print(classification_report(y_val, model.predict(test_data)))
    dfr = pd.DataFrame(y_val)
    dfr.columns = ['true_label']
    dfr['CHANGE_ID'] = df_val['CHANGE_ID']
    y_test_hat = model.predict_proba(test_data)[:, 1]
    dfr['score'] = y_test_hat
    dfr['predict_label'] = model.predict(test_data)
    dfr = dfr.sort_values('score', ascending=False)
    dfr['order'] = range(1, dfr.shape[0] + 1)
    print(dfr[dfr.true_label == 1])
    return dfr

# Cell
def predict(model,df_predict,cat_cols, thr=0.5):
    test_data=Pool(data=df_predict,cat_features=cat_cols)
    dfr=pd.DataFrame(df_predict['CHANGE_ID'])
    y_test_hat=model.predict_proba(test_data)[:,1]
    dfr['score']=y_test_hat
    dfr['predict_label'] = 0
    dfr.loc[dfr.score>=thr, 'predict_label']=1
    dfr.sort_values("score", ascending=False, inplace=True)
    print('--------------------------------------------------')
    s=dfr['predict_label'].value_counts()
    print(s)
    print(f'su sample num：{s.loc[1] if 1 in s else 0}')
    return dfr

# Cell
def explain(model,df_predict,cat_cols,dfr):
    test_data=Pool(data=df_predict,cat_features=cat_cols)
    shap_values=model.get_feature_importance(test_data,type='ShapValues')
    dfs=pd.DataFrame(shap_values[:,:-1],columns=df_predict.columns,index=df_predict['CHANGE_ID'])
    dfs_T=dfs.T
    ss=[]
    for i in range(dfs_T.shape[1]):
        ss.append(dfs_T.iloc[:,i].copy().sort_values(ascending=False).iloc[:5])
    count=0
    rr=[]
    for line in dfr[dfr.predict_label==1].itertuples():
        rr.append({"change_id":line.CHANGE_ID,"FS_SC_NM":"个险模型","FS_SC_SCORE":round(line.score,2),"FS_SC_EXPLAIN":','.join([f'{i[0]}:{round(i[1], 2)}' for i in list(zip(ss[count].index,ss[count].values))])})
    count+=1
    print(rr)
    return rr